""" Main module for the proxy """
import socket
import sys

# https://www.w3.org/Protocols/HTTP/1.0/spec.html#Methods #
VALID_HTTP_VERBS = [
    "POST",
    "HEAD",
]

def main():
    """ All the logics """
    port = 0

    # Check the input
    num_args = len(sys.argv)
    if num_args > 2:
        print "Too many arguments.  This program only takes a port number"
        return
    elif num_args < 2:
        print "Too few arguments.  This program takes a port number"
        return

    try:
        port = int(sys.argv[1])
        if port < 0 or port > 65535:
            raise ValueError
    except ValueError:
        print "Input must be a valid port number"
        return

    server_socket = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind(('', port))
    server_socket.listen(1)
    print "Server is ready to receive"
    while True:
        # Reveive the request from client
        connection_socket, addr = server_socket.accept()
        message = connection_socket.recv(1024).decode()
        print message + " recieved from client at: {0}".format(addr)
        
        # Split message on spaces.  Should be length 3
        #   with [verb, url, http/1.0]
        parts = message.split(' ')
        print parts

        # Form response message
        response = response_message(200, "OK")
        if len(parts) != 3 and len(parts) != 5: 
            print "PARTS: " + str(len(parts))
            response = response_message(400, "Bad Request")
        elif parts[0].upper() in VALID_HTTP_VERBS:
            response = response_message(501, "Not Implemented")
        elif parts[0].upper() != "GET":
            print parts[0].upper()
            response = response_message(400, "Bad Request")
        elif parts[2].strip() != "HTTP/1.0":
            print parts[2].strip()
            response = response_message(400, "Bad Request")
        elif len(parts) == 5 and parts[3].lower() != "Host":
            response = response_message(400, "Bad Request")
        # Extract url information and add it to the Host header info if need be
        host_to_connect_to = parts[1]
        if len(parts) == 5:
            host_to_connect_to = parts[4] + parts[1]
        print "Connecting to: " + host_to_connect_to

        connection_socket.send(response)
        print "Closing connection to client at: {0}".format(addr)
        connection_socket.close()


def response_message(code, message):
    """ Format a response message """
    return "HTTP/1.0 {0} {1}".format(code, message)


if __name__ == "__main__":
    main()
